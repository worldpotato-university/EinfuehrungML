function [description,instructions,templates] = prepareTutorialErrors()
description = [...
'In this tutorial, we investigate the performance of our neural nets\n'...
'for the MNIST data set.\n'...
'To keep things simple, we do without biases firstand start with a very\n'...
'simple learning strategy.\n'...
];
instructions = [...
'1. A script runMNIST.m is prepared for you. It basically contains the call\n'...
'   of the gradient descent learning procedure. A new block is included:\n'...
'   The call of the function calcErr, which shall assess the learning\n'...
'   progress. The error shall be calculated for the training data as well\n'...
'   as for the test data. Complete the function calcErr in file calcErr.m.\n'...
'2. A graphical output of the evolution of the errors shall be implemented\n'...
'   in runMNIST.m. Add the necessary plot commands. Do not forget to call\n'...
'   drawnow at the end of your plot commands.\n'...
'3. Let the net learn an see how the errors evolve. Change the constants such\n'...
'   as the amount of used images for training and test and the number of\n'...
'   neurons.\n'...
'4. Can you improve the net and its performance? You could change the\n'...
'   learning strategy (add momentum), the layers (add at least bias),\n'...
'   and the net structure.\n'
];
templates = { 'runMNIST.m', 'calcLinearLayer.m', 'calcSigmoidLayer.m', ...
    'calcSoftmaxLayer.m', 'calcNumGradients.m', 'calcErr.m', ...
    'gradientDescent.m', 'nCrossEntropy.m', 'quadraticCosts.m', ...
    'sigmoid.m', 'softmax.m', 'predict.m' };
end
